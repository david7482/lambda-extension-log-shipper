// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/david7482/lambda-extension-log-shipper/logservice (interfaces: LogAPIClient)

// Package automocks is a generated GoMock package.
package automocks

import (
	context "context"
	extension "github.com/david7482/lambda-extension-log-shipper/extension"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogAPIClient is a mock of LogAPIClient interface
type MockLogAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogAPIClientMockRecorder
}

// MockLogAPIClientMockRecorder is the mock recorder for MockLogAPIClient
type MockLogAPIClientMockRecorder struct {
	mock *MockLogAPIClient
}

// NewMockLogAPIClient creates a new mock instance
func NewMockLogAPIClient(ctrl *gomock.Controller) *MockLogAPIClient {
	mock := &MockLogAPIClient{ctrl: ctrl}
	mock.recorder = &MockLogAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogAPIClient) EXPECT() *MockLogAPIClientMockRecorder {
	return m.recorder
}

// SubscribeLogs mocks base method
func (m *MockLogAPIClient) SubscribeLogs(arg0 context.Context, arg1 []extension.LogType, arg2 extension.SubscribeLogsParams) (extension.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(extension.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeLogs indicates an expected call of SubscribeLogs
func (mr *MockLogAPIClientMockRecorder) SubscribeLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLogs", reflect.TypeOf((*MockLogAPIClient)(nil).SubscribeLogs), arg0, arg1, arg2)
}
